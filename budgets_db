import sqlite3

# Database filename
DB_NAME = "budgets.db"

def connect():
    """
    Establish a connection to the SQLite database.
    Returns a connection object.
    """
    return sqlite3.connect(DB_NAME)

def create_table():
    """
    Create the 'budgets' table if it doesn't already exist.
    Columns:
        - id: unique identifier (auto-incremented)
        - budget_name: name of the budget category
        - budget_amount: amount allocated to the budget
    """
    conn = connect()
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS budgets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            budget_name TEXT,
            budget_amount REAL
        )
    """)
    conn.commit()
    conn.close()

def insert_budget(name, amount):
    """
    Insert a new budget entry into the database.
    Parameters:
        - name (str): name of the budget
        - amount (float): amount allocated
    """
    conn = connect()
    cur = conn.cursor()
    cur.execute("INSERT INTO budgets (budget_name, budget_amount) VALUES (?, ?)", (name, amount))
    conn.commit()
    conn.close()

def fetch_budgets():
    """
    Retrieve all budget entries from the database.
    Returns:
        - List of tuples: (id, budget_name, budget_amount)
    """
    conn = connect()
    cur = conn.cursor()
    cur.execute("SELECT id, budget_name, budget_amount FROM budgets")
    budgets = cur.fetchall()
    conn.close()
    return budgets

def fetch_budget_by_name(name):
    """
    Retrieve budget entries that match a specific name.
    Parameters:
        - name (str): budget name to search for
    Returns:
        - List of matching tuples
    """
    conn = connect()
    cur = conn.cursor()
    cur.execute("SELECT id, budget_name, budget_amount FROM budgets WHERE budget_name = ?", (name,))
    results = cur.fetchall()
    conn.close()
    return results

def update_budget(name, new_amount):
    """
    Update the amount for a specific budget entry.
    Parameters:
        - name (str): name of the budget to update
        - new_amount (float): new amount to set
    """
    conn = connect()
    cur = conn.cursor()
    cur.execute("UPDATE budgets SET budget_amount = ? WHERE budget_name = ?", (new_amount, name))
    conn.commit()
    conn.close()

def delete_budget(name):
    """
    Delete a budget entry by name.
    Parameters:
        - name (str): name of the budget to delete
    """
    conn = connect()
    cur = conn.cursor()
    cur.execute("DELETE FROM budgets WHERE budget_name = ?", (name,))
    conn.commit()
    conn.close()
